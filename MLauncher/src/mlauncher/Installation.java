/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mlauncher;

import java.awt.Dimension;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

/**
 *
 * @author panqu
 */
public class Installation extends javax.swing.JPanel {
    private String ZIP_FILE_URL;
    private String INPUT_ZIP_FILE;
    private String OUTPUT_FOLDER;

    /**
     * Creates new form Installation
     */
    public Installation() {
        initComponents();
        setPreferredSize( new Dimension( 400, 100 ) );
        setVisible(true);
    }
    //Download + Unzip retrieved from: https://gist.github.com/phaniram/6233013
    public static void copyInputStream(InputStream in, OutputStream out)
            throws IOException {
        byte[] buffer = new byte[1024];
        int len;
        while ((len = in.read(buffer)) >= 0) {
            out.write(buffer, 0, len);
        }
        in.close();
        out.close();
    }
    
    public void downloadFile() {
        try {
            URL url = new URL(this.ZIP_FILE_URL);
            
            HttpURLConnection httpConnection = (HttpURLConnection) url.openConnection();
            httpConnection.setRequestMethod("HEAD");
            long FileSize = httpConnection.getContentLengthLong();
            
            long startTime = System.currentTimeMillis();

            url.openConnection();
            InputStream reader = url.openStream();

            FileOutputStream writer = new FileOutputStream(this.INPUT_ZIP_FILE);
            byte[] buffer = new byte[102400];
            int bytesRead = 0;

            System.out.println("Reading ZIP file 20KB blocks at a time.\n");

            while ((bytesRead = reader.read(buffer)) > 0) {
                writer.write(buffer, 0, bytesRead);
                buffer = new byte[102400];

            }

            long endTime = System.currentTimeMillis();

            System.out.println("Done. " + FileSize + " bytes read (" + Long.toString(endTime - startTime) + " millseconds).\n");
            writer.close();
            reader.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
    
    public void unZipIt() {
        try {

            ZipFile zipFile = new ZipFile(INPUT_ZIP_FILE);

            Enumeration zipEntries = zipFile.entries();

            File OUTFILEFOLD = new File(OUTPUT_FOLDER);
            if (!OUTFILEFOLD.exists()) {
                OUTFILEFOLD.mkdir();
            }
            String OUTDIR = OUTPUT_FOLDER + File.separator;
            while (zipEntries.hasMoreElements()) {
                ZipEntry zipEntry = (ZipEntry) zipEntries.nextElement();

                if (zipEntry.isDirectory()) {
                    System.out.println("      Extracting directory: " + OUTDIR + zipEntry.getName());

                    new File(OUTDIR + zipEntry.getName()).mkdir();
                    continue;
                }

                System.out.println("       Extracting file: " + OUTDIR + zipEntry.getName());

                copyInputStream(zipFile.getInputStream(zipEntry), new BufferedOutputStream(new FileOutputStream(OUTDIR + zipEntry.getName())));
            }

            zipFile.close();
        } catch (IOException ioe) {
            System.err.println("Unhandled exception:");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnInstall = new javax.swing.JButton();

        btnInstall.setText("INSTALAR MODS");
        btnInstall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInstallActionPerformed(evt);
            }
        });
        add(btnInstall);
    }// </editor-fold>//GEN-END:initComponents

    private void btnInstallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInstallActionPerformed
    ZIP_FILE_URL = "https://hugo1568.github.io/Basic-bad-written-java-mod-downloader/launcher/upload/mods/TEST.zip";
    INPUT_ZIP_FILE = "TEST.zip";
    OUTPUT_FOLDER = "/Users/panqu/AppData/Roaming/.minecraft/mods";
    
    downloadFile();
    unZipIt();
    }//GEN-LAST:event_btnInstallActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInstall;
    // End of variables declaration//GEN-END:variables
}
